/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: TST1818 (https://sketchfab.com/TST1818)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hobbit-house-low-poly-5ce32873e252416aa7164aba2d84298b
Title: Hobbit House - Low poly
*/

import React, { useRef, useEffect } from "react";
import { a } from "@react-spring/three";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import Pika from "./Pokemons/Pika";
import Geodude from "./Pokemons/Geodude";
import Boppin from "./Pokemons/Boppin";

import islandScene from "../assets/3d/island2.glb";
import Mewtwo from "./Pokemons/Mewtwo";
import Umbreon from "./Pokemons/Umbreon";
import Beedrill from "./Pokemons/Beedrill";
import Scizor from "./Pokemons/Scizor";
import Infernape from "./Pokemons/Infernape";
import Self from "./Pokemons/Self";

export function Island({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) {
  const islandRef = useRef();

  // Get access to the Three.js renderer and viewport
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(islandScene);

  // Use a ref for the last mouse x position
  const lastX = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 6.85:
          setCurrentStage(1);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(4);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  return (
    <a.group ref={islandRef} {...props} dispose={null}>
      <a.group rotation={[-Math.PI / 2, 0, 0]} scale={0.06}>
        <a.group rotation={[Math.PI / 2, 0, 0]}>
          <a.group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Doors_and_Windows_Texture_Material_0.geometry}
              material={materials.Texture_Material}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Doors_and_Windows_Glow_0.geometry}
              material={materials.Glow}
            />
          </a.group>

          <Pika {...props} />

          <Geodude {...props} />

          <Boppin {...props} />

          <Mewtwo {...props} />

          <Umbreon {...props} />

          <Beedrill {...props} />

          <Scizor {...props} />

          <Infernape {...props} />

          <Self {...props} />

          <a.group
            position={[11.677, 110.352, -49.61]}
            rotation={[-1.415, 0.068, -0.095]}
            scale={4.175}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Terrain_Terrain_top_mat_0.geometry}
              material={materials.Terrain_top_mat}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Terrain_Terrain_bottom_mat_0.geometry}
              material={materials.Terrain_bottom_mat}
            />
          </a.group>
          <a.group
            position={[-412.77, 136.939, -72.832]}
            rotation={[1.158, 0.574, 2.292]}
            scale={13.303}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Trees_Texture_Material_0.geometry}
              material={materials.Texture_Material}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Trees_bush_1_0.geometry}
              material={materials.bush_1}
            />
          </a.group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fences_Texture_Material_0.geometry}
            material={materials.Texture_Material}
            position={[-23.045, 150.109, -216.8]}
            rotation={[-1.525, 0.081, 2.844]}
            scale={[2.901, 2.901, 2.88]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Roof_Texture_Material_0.geometry}
            material={materials.Texture_Material}
            position={[11.677, 110.352, -49.61]}
            rotation={[-1.415, 0.068, -0.095]}
            scale={4.175}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Stairs_Bricks_0.geometry}
            material={materials.Bricks}
            position={[-128.335, 73.174, -154.82]}
            rotation={[-Math.PI / 2, 0, -0.967]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Walls_Bricks_0.geometry}
            material={materials.Bricks}
            position={[298.898, 14.957, -32.494]}
            rotation={[-Math.PI / 2, 0, -0.967]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Well_Texture_Material_0.geometry}
            material={materials.Texture_Material}
            position={[162.027, 12.176, -25.63]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={31.143}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fireflies_Glow_0.geometry}
            material={materials.Glow}
            position={[-75.749, 147.576, -396.968]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={1.984}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Flat_Grass_Final_Grass_0.geometry}
            material={materials.Final_Grass}
            position={[334.479, 9.345, -118.476]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Flowers_Final_Grass_0.geometry}
            material={materials.Final_Grass}
            position={[-95.88, 12.207, -39.938]}
            rotation={[-1.496, 0.143, 0.681]}
            scale={2.204}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rocks_Texture_Material_0.geometry}
            material={materials.Texture_Material}
            position={[20.577, -3.536, -44.211]}
            rotation={[-1.462, 0.096, -1.241]}
            scale={9.811}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Small_Grass_Final_Grass_0.geometry}
            material={materials.Final_Grass}
            position={[-35.316, 40.398, 70.605]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </a.group>
      </a.group>
    </a.group>
  );
}
